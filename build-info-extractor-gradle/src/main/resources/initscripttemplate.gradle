import org.gradle.api.internal.project.ProjectInternal

initscript {
  repositories {
    flatDir(dirs: file('${pluginLibDir}'))
  }
  dependencies {
    classpath ":build-info-extractor-gradle:1.0.3"
    classpath ":build-info-client:1.4.5"
    classpath ":build-info-api:1.4.5"
    classpath ":build-info-extractor:1.4.5"
    classpath "commons-lang:commons-lang:2.4"
    classpath "commons-logging:commons-logging:1.1"
    classpath "com.google.guava:guava:r06"
    classpath "com.google.code.findbugs:jsr305:1.3.7"
    classpath "org.codehaus.jackson:jackson-mapper-asl:1.5.1"
    classpath "org.codehaus.jackson:jackson-core-asl:1.5.1"
    classpath "org.apache.httpcomponents:httpclient:4.0"
    classpath "org.apache.httpcomponents:httpcore:4.0.1"
  }
}
addListener(new PropertyListener())
class PropertyListener extends BuildAdapter implements BuildListener {
  def void settingsEvaluated(Settings settings) {
    Map<String, String> projProps = settings.getStartParameter().getProjectProperties()
    projProps.putAll([${allBuildInfoProperties}])
  }
}
addListener(new ArtifactoryPlugin())
class ArtifactoryPlugin extends BuildAdapter {
  String findBestProperty(Gradle gradle, String key, Closure defVal) {
    ProjectInternal rootProject = gradle.getRootProject()
    Map startParams = gradle.getStartParameter().getProperties()
    def val
    if (System.hasProperty(key)) {
      val = System.getProperty(key)
    } else if (startParams.hasProperty(key)) {
      val = rootProject.getProperty(key)
    } else if (rootProject.hasProperty(key)) {
      val = rootProject.getProperty(key)
    } else {
      val = defVal.call()
    }
    rootProject.setProperty(key, val)
    return val
  }

  def void projectsLoaded(Gradle gradle) {
    def repoId = 'libs'
    def artifactoryUrl = findBestProperty(gradle, 'artifactory.contextUrl') {
      if (gradle.rootProject.hasProperty('sourceURI')) {
        logger.debug("sourceURI: $gradle.rootProject.sourceURI")
        String fullPath = sourceURI.path
        String[] pathParts = fullPath.split("/")
        if (pathParts.size() >= 3) {
          repoId = pathParts[2]
        }
        "${sourceURI.scheme}://${sourceURI.authority}/${pathParts[1]}"
      } else {
        'http://gradle.artifactoryonline.com/gradle'
      }
    }
    repoId = findBestProperty(gradle, 'artifactory.resolve.repoKey') { repoId }

    gradle.rootProject.logger.debug("artifactory.contextUrl: $artifactoryUrl")
    gradle.rootProject.logger.debug("artifactory.repoId: $repoId")

    def repoPluginsUrl = artifactoryUrl + "/" + repoId
    gradle.rootProject.logger.debug("Using $repoPluginsUrl for plugin repo URL")

    //All the tango above for this one - it configures maven repo for the project
    gradle.rootProject.repositories {
      mavenRepo urls: [repoPluginsUrl]
    }
    /* dependencies {
      classpath ":build-info-extractor-gradle:1.0-SNAPSHOT"
    }*/

    gradle.rootProject.allprojects {
      apply {
        apply plugin: org.jfrog.build.ArtifactoryPlugin
      }
    }
  }
}
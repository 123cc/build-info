/*
 * Copyright (C) 2010 JFrog Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.jfrog.build.Version
import org.apache.tools.ant.filters.ReplaceTokens

version = new Version(project)
buildInfoVersion='1.4.x-SNAPSHOT'

description = 'JFrog Build-Info Gradle Extractor'

apply plugin: 'groovy'

configurations{
  tools
}

dependencies {
    compile gradleApi()
    tools group: 'com.tonicsystems.jarjar', name: 'jarjar-plugin', version: '1.0'
    compile project(':api')
    compile project(':client')
    compile project(':extractor')
    compile("org.codehaus.plexus:plexus-component-annotations:1.5.4") {
        provided: true
    }
    compile("com.google.code.findbugs:jsr305:1.3.9") {
        provided: true
    }
    compile group: 'com.google.guava', name: 'guava', version: 'r06'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.0'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.0.1'
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.5.1'
    compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.5.1'
    compile group: 'javax.annotation', name: 'jsr250-api', version: '1.0'
    compile group: 'org.apache.ivy', name: 'ivy', version: '2.2.0'
    groovy localGroovy()
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/*template.gradle'
        filter(ReplaceTokens, tokens: ['fullVersion': version.toString(), 'buildInfoVersion':buildInfoVersion])
    }
}

task jarAll(type: Jar, dependsOn: jar) {
  inputs.files jar.archivePath
  classifier = 'uber'
  doLast {
    project.ant {
      taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.tools.asPath
      jarjar(jarfile: archivePath) {
        zipfileset(src: jar.archivePath)
        configurations.compile.files.findAll {file ->
          ['build-info', 'guava', 'commons-logging', 'httpclient', 'httpcore', 'jackson-mapper-asl', 'jackson-core-asl'].any { file.name.startsWith(it) && ['ivy'].every {!file.name.startsWith(it)}}
        }.each {jarjarFile ->
          zipfileset(src: jarjarFile)
        }
      }
    }
  }
}

artifacts {
  archives jarAll
}

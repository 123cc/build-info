/*
 * Copyright (C) 2010 JFrog Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.jfrog.build.Version
import org.jfrog.build.Status

import org.apache.tools.ant.filters.ReplaceTokens

// Root project version should not be used
version = '2'
baseProjectNames = ['build-info-api', 'build-info-client', 'build-info-extractor']

allprojects {
  apply plugin: 'idea'
  group = 'org.jfrog.buildinfo'
}

def baseProjects() {
  subprojects.findAll { p -> baseProjectNames.contains(p.name) }
}

def extractorProjects() {
  subprojects.findAll { p -> !baseProjectNames.contains(p.name) }
}

subprojects {
  apply plugin: 'maven'
  apply plugin: 'java'
  sourceCompatibility = 1.5
  targetCompatibility = 1.5
  buildInfoVersion = new Version(rootProject, baseProjectNames)
  status = new Status(rootProject, baseProjectNames)

  dependencies {
    compile group: 'commons-lang', name: 'commons-lang', version: '2.4'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
    testCompile group: 'org.testng', name: 'testng', version: '5.12.1'
  }

  // From the install task of the maven plugin (an upload task), take the RepositoryHandler (repositories) and for the
  // MavenResolver (mavenInstaller) take the pomFilterContainer (pom) and configure the maven project
  configure(install.repositories.mavenInstaller) {
    pom.project {
      url 'http://wiki.jfrog.org/confluence/display/RTF/Build+Integration'
      licenses {
        license {
          name 'The Apache Software License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }
      mailingLists {
        mailingList {
          name 'JFrog Mailing List'
          subscribe 'https://lists.sourceforge.net/lists/listinfo/artifactory-users'
          archive 'http://forums.jfrog.org/Artifactory-Users-f2377369.html'
        }
      }
      issueManagement {
        system 'jira'
        url 'http://issues.jfrog.org/jira/browse/BI'
      }
    }
  }
  task sourceJar(type: Jar, dependsOn: jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
  }

  install {
    dependsOn: jar
    dependsOn: sourceJar
  }
}

configure(baseProjects()) {
  version = buildInfoVersion
  dependencies {
    compile "com.google.guava:guava:r07"
    compile "com.thoughtworks.xstream:xstream:1.3.1"
  }
  test.useTestNG()

  // Add the sourceJars to non-extractor modules
  artifacts {
    archives sourceJar
  }
}

// Create configurations for the extractor projects
configure(extractorProjects()) {
  configurations {
    provided
    tools
    sources
    uberJar {
      description = 'All jars that should be included in the Uber Jar'
      transitive = true
    }
    compile {
      extendsFrom uberJar
      extendsFrom provided
    }
  }

  dependencies {
    tools group: 'com.tonicsystems.jarjar', name: 'jarjar-plugin', version: '1.0'
  }

  task jarAll(type: Jar, dependsOn: jar) {
    //Add the directory of the archive as the input files for this task
    classifier = 'uber'
    doLast {
      project.ant {
        taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.tools.asPath
        //Zip the  project's jar (jar.archivePath) and the dependencies defined for the uberJar conf into archivePath (with classifier)
        jarjar(jarfile: archivePath) {
          zipfileset(src: jar.archivePath)
          configurations.uberJar.files.each {jarjarFile ->
            if (!jarjarFile.name.endsWith("-sources.jar")) {
              zipfileset(src: jarjarFile)
            }
          }
        }
      }
    }
  }

  // Add the published artifact of the jarAll task to the list of published artifacts for the archives configuration
  artifacts {
    archives jarAll
    archives sourceJar
  }

  // Treat the uberJar conf as a maven compile scope so that uberJar depenedncies are transformed into compile-scope
  // dependencies in generated extractor poms
  configure(install.repositories.mavenInstaller) {
    pom.scopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY + 1, configurations.uberJar, "compile")
    pom.scopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY + 2, configurations.provided, "provided")
  }
}

// Declare the root project to build its children first
dependsOnChildren()

project('build-info-api') {
  description = 'JFrog Build-Info API'
}

project('build-info-client') {
  description = 'JFrog Build-Info Client'
  dependencies {
    compile project(':build-info-api')
    compile "org.apache.httpcomponents:httpclient:4.0"
    compile "org.codehaus.jackson:jackson-mapper-asl:1.5.1"
  }
  sourceSets {
    main {
      resources {
        srcDir 'src/main/filtered-resources'
      }
    }
  }
  processResources {
    from(sourceSets.main.resources.srcDirs) {
      include '**/*bi.client.properties'
      filter(ReplaceTokens, tokens: ['project.version': project.version.toString()])
    }
  }

}

project('build-info-extractor') {
  description = 'JFrog Build-Info Extractor'
  dependencies {
    compile project(':build-info-client')
    testCompile "org.easymock:easymockclassextension:2.5.2"
  }
}

project('build-info-extractor-ivy') {
  version = new Version(project)
  status = new Status(project)
  description = 'JFrog Build-Info Ivy Extractor'
  dependencies {
    uberJar project(':build-info-extractor')
    uberJar "org.slf4j:slf4j-api:1.5.8"
    uberJar "org.aspectj:aspectjweaver:1.6.9"
    provided("com.google.code.findbugs:jsr305:1.3.9") {
      provided: true
    }
    provided("org.apache.ivy:ivy:2.1.0") {
      provided: true
    }
    provided("org.apache.ant:ant:1.8.1") {
      provided: true
    }
  }
  configure(install.repositories.mavenInstaller) {
    pom.project {
      issueManagement {
        system 'jira'
        url 'http://issues.jfrog.org/jira/browse/IAP'
      }
    }
  }
}

project('build-info-extractor-gradle') {
  apply plugin: 'groovy'
  version = new Version(project)
  status = new Status(project)
  description = 'JFrog Build-Info Gradle Extractor'

  dependencies {
    compile gradleApi()
    uberJar project(':build-info-extractor')
    provided("org.codehaus.plexus:plexus-component-annotations:1.5.4") {
      provided: true
    }
    provided("com.google.code.findbugs:jsr305:1.3.9") {
      provided: true
    }
    compile group: 'javax.annotation', name: 'jsr250-api', version: '1.0'
    compile group: 'org.apache.ivy', name: 'ivy', version: '2.2.0'
    groovy localGroovy()
    testCompile(group: 'org.gradle', name: 'gradle-core', version: '0.9+', configuration: 'publicTestCompile')
    testCompile(group: 'net.java.dev.jna', name: 'jna', version: '3.2.2')
  }

  processResources {
    from(sourceSets.main.resources.srcDirs) {
      include '**/*template.gradle'
      filter(ReplaceTokens, tokens: ['fullVersion': version.toString(), 'buildInfoVersion': buildInfoVersion.toString()])
    }
  }

  configure(install.repositories.mavenInstaller) {
    pom.project {
      issueManagement {
        system 'jira'
        url 'http://issues.jfrog.org/jira/browse/GAP'
      }
    }
  }
}

project('build-info-extractor-maven3') {
  version = new Version(project)
  status = new Status(project)
  description = 'JFrog Build-Info Maven 3 Extractor'

  dependencies {
    uberJar project(':build-info-extractor')
    provided("org.codehaus.plexus:plexus-component-annotations:1.5.4") {
      provided: true
    }
    provided("org.apache.maven:maven-core:3.0") {
      provided: true
    }

    testCompile "org.easymock:easymockclassextension:2.5.2"
  }
  configure(install.repositories.mavenInstaller) {
    pom.project {
      issueManagement {
        system 'jira'
        url 'http://issues.jfrog.org/jira/browse/MAP'
      }
    }
  }
}
/*
 * Copyright (C) 2010 JFrog Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.jfrog.build.Version
import org.apache.tools.ant.filters.ReplaceTokens

// Root project version should not be used
version='2'

allprojects {
    apply plugin: 'idea'
    group = 'org.jfrog.buildinfo'
}

def baseProjects() {
    subprojects.findAll { !it.name.startsWith('extractor-') }
}

def extractorProjects() {
    subprojects.findAll { it.name.startsWith('extractor-') }
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'java'
    sourceCompatibility = 1.5
    targetCompatibility = 1.5
    buildInfoVersion = new Version(rootProject)
    artifactId = "build-info-$name"

    dependencies {
        compile group: 'commons-lang', name: 'commons-lang', version: '2.4'
        compile group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
        testCompile group: 'org.testng', name: 'testng', version: '5.12.1'
    }

    jar {
        baseName = artifactId
    }
}

configure(baseProjects()) {
    version = buildInfoVersion
    dependencies {
        compile "com.google.guava:guava:r07"
        compile "com.thoughtworks.xstream:xstream:1.3.1"
    }
    test.useTestNG()
}

configure(extractorProjects()) { p ->
    version = new Version(p)
}

project('api') {
    description = 'JFrog Build-Info API'
}

project('client') {
    description = 'JFrog Build-Info Client'
    dependencies {
        compile project(':api')
        compile "org.apache.httpcomponents:httpclient:4.0"
        compile "org.codehaus.jackson:jackson-mapper-asl:1.5.1"
    }
}

project('extractor') {
    description = 'JFrog Build-Info Extractor'
    dependencies {
        compile project(':client')
        testCompile "org.easymock:easymockclassextension:2.5.2"
    }
}

project('extractor-ivy') {
    description = 'JFrog Build-Info Ivy Extractor'
    dependencies {
        compile project(':extractor')
        compile "org.slf4j:slf4j-api:1.5.8"
        compile "org.aspectj:aspectjweaver:1.6.9"
        compile("com.google.code.findbugs:jsr305:1.3.9") {
            provided: true
        }
        compile("org.apache.ivy:ivy:2.1.0") {
            provided: true
        }
        compile("org.apache.ant:ant:1.8.1") {
            provided: true
        }
    }
}

project('extractor-gradle') {
    apply plugin: 'groovy'

    description = 'JFrog Build-Info Gradle Extractor'

    dependencies {
        compile gradleApi()
        compile project(':extractor')
        compile("org.codehaus.plexus:plexus-component-annotations:1.5.4") {
            provided: true
        }
        compile("com.google.code.findbugs:jsr305:1.3.9") {
            provided: true
        }
        compile group: 'javax.annotation', name: 'jsr250-api', version: '1.0'
        compile group: 'org.apache.ivy', name: 'ivy', version: '2.2.0'
        groovy localGroovy()
    }

    processResources {
        from(sourceSets.main.resources.srcDirs) {
            include '**/*template.gradle'
            filter(ReplaceTokens, tokens: ['fullVersion': version.toString(), 'buildInfoVersion': buildInfoVersion.toString()])
        }
    }
}

project('extractor-maven3') {
    description = 'JFrog Build-Info Maven 3 Extractor'

    dependencies {
        compile project(':extractor')
        compile("org.codehaus.plexus:plexus-component-annotations:1.5.4") {
            provided: true
        }
        compile("org.apache.maven:maven-core:3.0") {
            provided: true
        }

        testCompile "org.easymock:easymockclassextension:2.5.2"
    }
}

dependsOnChildren()
